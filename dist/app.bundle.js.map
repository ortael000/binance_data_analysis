{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://binance_trade/./src/Function_diverses.js","webpack://binance_trade/./src/Function_data.js","webpack://binance_trade/./src/Function_Indicator.js","webpack://binance_trade/./src/Function_Strategy.js","webpack://binance_trade/./src/Main.js"],"sourcesContent":["\r\n              // declaration des fonctions\r\n\r\n\r\n export function convertinsecond(timeinput) {   // Convertit l'input envoye a l'API binance concernant le temps entre chaque interval (ex : 15m) en nombre de seconde\r\n          let resustat1 = 0;\r\n          if (timeinput == \"1m\") { \r\n            resustat1 = 60;\r\n           } else if (timeinput == \"3m\") {\r\n            resustat1 = 180;\r\n           } else if (timeinput == \"5m\") {\r\n            resustat1 = 300;\r\n          } else if (timeinput == \"15m\") {\r\n            resustat1 = 900;\r\n          } else if (timeinput == \"30m\") {\r\n            resustat1 = 1800;\r\n          } else if (timeinput == \"1h\") {\r\n            resustat1 = 3600;\r\n          }\r\n          return resustat1;\r\n }\r\n\r\n export function converttodate (timestamp) { // convertit un timestamp en une date (string)\r\n\r\n    let date = new Date(timestamp).toLocaleDateString(\"en-GB\");\r\n  return date ;\r\n\r\n }\r\n\r\n export function converttohours(timestamp){\r\n\r\n  let hours = new Date(timestamp).toLocaleTimeString(\"en-GB\");\r\n  return hours;\r\n }\r\n\r\n export function Appelle_API(URLinput) {      // une fonction qui appelle l'API binanc\r\n  \r\n  if (URLinput == 1) { return [[]];}\r\n\r\n  else {\r\n\r\n    return fetch(URLinput)   //\"https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&limit=10000\"\r\n    .then(function(res) {\r\n        if (res.ok) {\r\n        return res.json();\r\n      }\r\n    })\r\n    .then(function(jsonfile) {  \r\n\r\n      return jsonfile;\r\n\r\n      })  \r\n\r\n    .catch(function(err) {\r\n      // Une erreur est survenue\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport function converttoURL (startTime_value, endTime_value, interval_par_iteration, interval_en_seconde, symbole_value, interval_value) // Une fonction qui prend en input les timesstemps de depart, le nombre de ligne max (generalement 500) et le nombre de seconde dans un intreval (ex 300 pour 5m) et renvoie un tableau avec les URL successifs a utiliser pour l'API.\r\n{\r\n  let result = [];\r\n  let API= \"\";\r\n  let nombre_interval_total = Math.floor(((endTime_value-startTime_value)/1000)/interval_en_seconde);   // nombre total de ligne qu'on souhaite appeler\r\n  let nombre_iteration = Math.ceil(nombre_interval_total/interval_par_iteration);    // nombre de fois qu'on va faire tourner la boucle for\r\n  let startTime_value2 = 0;\r\n\r\n  for (let i = 0; i < nombre_iteration; i++) {\r\n\r\n    startTime_value2 = startTime_value + (i*interval_par_iteration*interval_en_seconde*1000);\r\n\r\n      API = \"https://api.binance.com/api/v3/klines?symbol=\"+symbole_value+\"&interval=\"+interval_value+\"&startTime=\"+startTime_value2+\"&endTime=\"+endTime_value+\"&limit=\"+interval_par_iteration;\r\n      \r\n      result.push(API);\r\n  }\r\n\r\n  for (let i = 0; i < 10; i++) {\r\n    result.push(1);\r\n\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function arrayToCsv(data){\r\n  return data.map(row =>\r\n    row\r\n    .map(String)  // convert every value to String\r\n    // .map(v => v.replaceAll('\"', '\"\"'))  // escape double colons\r\n    // .map(v => `\"${v}\"`)  // quote it\r\n    .join(',')  // agregate all elements of a row of the tble with comma-separated in between\r\n  ).join('\\r\\n');  // agregate all row of the table (that have previously been tranformed to one string each, with \"\\r\\n\" in between)\r\n}\r\n\r\nexport function downloadCsv(csv, filename) {\r\n  const fakeLink = document.createElement('a');  // on cree un element \"fakelink\" \r\n  fakeLink.style.display = 'none'; \r\n  document.body.appendChild(fakeLink); // qu'on rattache ensuite au body du document\r\n  const blob = new Blob([csv], { type: 'text/csv' }); // on creer ensuite l'element CSV avec Blob ( voir : https://developer.mozilla.org/fr/docs/Web/API/Blob )\r\n\r\n  //if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n  //    // Manage IE11+ & Edge\r\n  //    window.navigator.msSaveOrOpenBlob(blob, `${filename}.csv`);\r\n  //} else {\r\n\r\n      fakeLink.setAttribute('href', URL.createObjectURL(blob)); // on attribue au lien fakeLink la href de l'URL vers l'objet blop (qu'on cree au passage)\r\n      fakeLink.setAttribute('download', `${filename}.csv`);   // on attribue au lien le fait d'etre un lien de telechargement du fichier tel qu'on l'a nomme en input, au format csv\r\n      fakeLink.click();  // on simule le fait de cliquer sur le lien\r\n\r\n  //}\r\n};\r\n\r\nexport function convert_table_html (table) {  // fonction qui convertir une table js en un texte qui correspond au code pour creer la table en html\r\n\r\n  let html_text = \"<table> <tr>\";\r\n\r\n  for (let j = 0; j < table.length; j++) {  // Pour chaque autre ligne, on ajoute les elements en format hmtl\r\n\r\n    html_text = html_text + \" </tr>\";\r\n\r\n    for (let i = 0; i < table[0].length; i++) {\r\n\r\n      html_text = html_text + \" <td> \" + table[j][i] + \" </td> \";\r\n    }\r\n\r\n    html_text = html_text + \" </tr>\";\r\n  }\r\n\r\n  html_text = html_text + \"<?table>\";\r\n\r\n  return html_text;\r\n\r\n}\r\n\r\nexport function csvToArray(str, delimiter = \",\") {\r\n  // slice from start of text to the first \\n index\r\n  // use split to create an array from string by delimiter\r\n  const headers = str.slice(0, str.indexOf(\"\\n\")).split(delimiter);\r\n\r\n  // slice from \\n index + 1 to the end of the text\r\n  // use split to create an array of each csv value row\r\n  const rows = str.slice(str.indexOf(\"\\n\") + 1).split(\"\\n\");\r\n\r\n  // Map the rows\r\n  // split values from each row into an array\r\n  // use headers.reduce to create an object\r\n  // object properties derived from headers:values\r\n  // the object passed as an element of the array\r\n  const arr = rows.map(function (row) {\r\n    const values = row.split(delimiter);\r\n    const el = headers.reduce(function (object, header, index) {\r\n      object[header] = values[index];\r\n      return object;\r\n    }, {});\r\n    return el;\r\n  });\r\n\r\n  // return the array\r\n  return arr;\r\n}\r\n\r\nexport function csvToArray2(csv, delimiter = \",\", omitFirstRow = true) {\r\n  console.log(csv.indexOf('\\n'));\r\n  return csv.slice(omitFirstRow ? csv.indexOf('\\n') : 0)\r\n            .split(\"\\n\")\r\n            .map((element) => element.split(delimiter));\r\n}\r\n","// https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#public-api-endpoints\r\nimport {convertinsecond,converttodate,converttohours,Appelle_API,converttoURL,arrayToCsv,downloadCsv,convert_table_html} from './Function_diverses';\r\nimport {Moving_average,Calculate_EMA,Calculate_EMA_ALT,Analyse_Openprice_vs_MA,Analyse_MACD_vs_MA,EMA_MACD_vs_MACD,growth_calculation} from './Function_Indicator';\r\n\r\n\r\nexport function creer_event_dl_data () {  \r\n  let data_table = [[]];\r\n\r\n  // On declare les differents elements de la page HTML en tant qu'element Javascrip\r\n\r\n      // declaration des elements html de la partie \"recuperation des donnees de l'API\"\r\n  let input_symbole_field2 = document.getElementById(\"input_symbole\");\r\n  let input_interval_field2 = document.getElementById(\"input_interval\");\r\n  let input_startTime_field2 = document.getElementById(\"input_startTime\");\r\n  let input_endTime_field2 = document.getElementById(\"input_endTime\");\r\n  let input_limit_field2 = document.getElementById(\"input_limit\");\r\n  let nombre_interval_field2 = document.getElementById(\"nombre_interval\");\r\n  let nombre_interval_traite2 = document.getElementById(\"interval_traite\");\r\n  let dlcsv_button = document.getElementById(\"dlcsv_button\");\r\n\r\n  // on declare les elements html relatif a l'upload d'un CSV deja existant\r\n  let cvs_input = document.getElementById(\"csvfile\");\r\n  let csv_input_form = document.getElementById(\"upload_csv_form\");\r\n  let result_upload = document.getElementById(\"result_upload\");\r\n\r\n  let afficher_data_button = document.getElementById(\"console_log_data\");\r\n\r\n  // Fin de la declaration des elements de la page HTML\r\n\r\n  let compteur2 =0;\r\n  const interval_par_iteration2 = 500;\r\n  let csv_as_string =\"\";\r\n  let title_table2 = [[\"Timestamp\",\"Date\",\"Hours\",\"Open\",\"High\",\"Low\",\"Close\",\"Volume\",\"Close time\",\"Quote asset volume\",\"Number of trades\",\"Taker buy base asset volume\",\"Taker buy quote asset volume\",\"ignore\"]];\r\n\r\n\r\n\r\n  const reader = new FileReader(); // on definit le Filereader qu'on va utiliser ainsi que ses proprietes\r\n  reader.onload = function (e) {\r\n    csv_as_string = e.target.result;\r\n    \r\n    \r\n  }\r\n\r\n  csv_input_form.addEventListener(\"submit\",function(e){\r\n    e.preventDefault();\r\n    const input = cvs_input.files[0];\r\n    reader.readAsText(input); \r\n    data_table = [[]];\r\n\r\n    setTimeout(function() {\r\n      const array = csvToArray2(csv_as_string);\r\n      result_upload.innerText = (\"Upload termine\")\r\n\r\n      for (let i=1; i< (array.length); i++) { \r\n\r\n        data_table[i-1]= (array[i]);\r\n        data_table[i-1][13]= 0;\r\n\r\n      }\r\n\r\n      console.log(data_table);\r\n\r\n    }, 150);\r\n\r\n  \r\n  });\r\n\r\n  dlcsv_button.addEventListener(\"click\",async function(){\r\n\r\n    \r\n    compteur2 =0;\r\n    let data = [[]];\r\n    let URL_T = [];\r\n    data_table = [[]];\r\n\r\n    console.log(\"go1\");\r\n\r\n    let symbole_value = input_symbole_field2.value ;\r\n    let interval_value =input_interval_field2.value ;\r\n    let original_starttime_value = input_startTime_field2.value*1000\r\n    let startTime_value = original_starttime_value ;\r\n    let endTime_value = input_endTime_field2.value*1000 ;\r\n\r\n\r\n    let interval_en_seconde = convertinsecond(interval_value); \r\n\r\n    let nombre_interval_total = Math.floor(((endTime_value-startTime_value)/1000)/interval_en_seconde); \r\n    nombre_interval_field.innerText = (nombre_interval_total);\r\n    let nombre_iteration = Math.ceil(nombre_interval_total/interval_par_iteration2);    // nombre de fois qu'on va faire appeler l'API\r\n\r\n    URL_T = converttoURL (startTime_value, endTime_value, interval_par_iteration2, interval_en_seconde, symbole_value, interval_value);\r\n\r\n    let nombre_iteration_restante = nombre_iteration;\r\n\r\n    while (nombre_iteration_restante >0 ) {   // dans ce while on appelle 10 fois (ou moins) l'API par boucle et on stock les donnes recus dans \"final table\" tant qu'il reste des iterations de l'API a lancer.\r\n\r\n      data = await Promise.all ([Appelle_API(URL_T[compteur2]),Appelle_API(URL_T[compteur2 + 1]),Appelle_API(URL_T[compteur2 + 2]),Appelle_API(URL_T[compteur2 + 3]),Appelle_API(URL_T[compteur2 + 4]),Appelle_API(URL_T[compteur2 + 5]),Appelle_API(URL_T[compteur2 + 6]),Appelle_API(URL_T[compteur2 + 7]),Appelle_API(URL_T[compteur2 + 8]),Appelle_API(URL_T[compteur2 + 9])]);\r\n\r\n      for (let k=0; k< Math.min(10,nombre_iteration_restante); k++) {\r\n    \r\n        for (let i = 0; i < data[k].length; i++) {\r\n        let ligne_table_result=[];\r\n    \r\n          for (let j=0; j<12; j++) {\r\n\r\n              if (j==0) { \r\n                ligne_table_result[j] = data[k][i][j];\r\n                ligne_table_result[j+1] =converttodate(data[k][i][j]);       // on convertit la donne \"timestamp\" en une ligne jour et une ligne heure, ce qui implique de creer une colonne supplementaire dans le tableau en resultat. D'ou le j+1 dans la suite de la boucle\r\n                ligne_table_result[j+2] = converttohours (data[k][i][j]);\r\n                \r\n              }\r\n              else {\r\n                \r\n                ligne_table_result[j+2]= Math.floor(data[k][i][j]);\r\n              }\r\n            \r\n          }\r\n\r\n          data_table[i+(compteur2+k)*500] = ligne_table_result;\r\n          nombre_interval_traite.innerText = (i+(compteur2+k)*500);  \r\n        }\r\n\r\n      }\r\n\r\n      nombre_iteration_restante = nombre_iteration_restante -10\r\n      compteur2 = compteur2 +10;\r\n    }\r\n\r\n    start_date_display.innerText = (converttodate(original_starttime_value));\r\n    end_date_display.innerText = (converttodate(endTime_value));\r\n\r\n    console.log(\"on affiche la table recupere depuis l'API\");\r\n    console.log(data_table);\r\n\r\n    // on cree puis on download le CSV\r\n    let Table_inCVS = arrayToCsv(title_table2) +\"\\r\\n\"+ arrayToCsv(data_table); // \"\\r\\n\" permet un retour a la ligne entre les deux tableaux convertit en string\r\n    downloadCsv(Table_inCVS,\"binancedata\");\r\n    // Fin de la creation du CSV\r\n\r\n  });\r\n\r\n  afficher_data_button.addEventListener(\"click\",function(){\r\n\r\n    console.log(data_table);\r\n  \r\n  });\r\n\r\n};\r\n","\r\n\r\nexport function Moving_average (table,etendu){\r\n\r\n  let table_average = [];\r\n  for (let i = 0; i < table.length; i++) {\r\n    table_average[i]= 0;\r\n\r\n    if (i < (etendu))  {\r\n    } else { \r\n        for (let j = 0; j < (etendu); j++) {\r\n          table_average[i] = table_average[i] + Number(table[i-j][3]);\r\n        }\r\n        table_average[i] = (Math.round(table_average[i]))/etendu;\r\n     }\r\n  }\r\n  return table_average;\r\n};\r\n\r\nexport function Calculate_EMA (table,etendu,indice){\r\n\r\n  let table_EMA =[];\r\n\r\n  for (let i = 0; i < table.length; i++) {\r\n    table_EMA[i]= 0;\r\n    \r\n    if (i < (etendu-1)) { \r\n      \r\n    } else if (i == (etendu-1)) {\r\n        for (let j = 0; j < etendu; j++) {\r\n          table_EMA[i] = table_EMA[i] + Number(table[i-j][indice]);\r\n        }\r\n        table_EMA[i] = (Math.round(table_EMA[i]))/etendu;\r\n\r\n    } else if (i > (etendu-1)) { \r\n      table_EMA[i] = (Number(table[i][indice] * (2/(etendu +1))))+ (table_EMA[i-1] * (1-((2/(etendu +1)))) ) ;\r\n     }\r\n  } \r\n  return table_EMA;\r\n};\r\n\r\nexport function Calculate_EMA_ALT (table,etendu,indice,start){\r\n\r\n  let table_EMA =[];\r\n\r\n  for (let i = 0; i < table.length; i++) {\r\n    table_EMA[i]= 0;\r\n    \r\n    if (i < (etendu+start-2)) { \r\n      \r\n    } else if (i == (etendu+start-2)) {\r\n        for (let j = 0; j < (etendu); j++) {\r\n          table_EMA[i] = table_EMA[i] + Number(table[i-j][indice]);\r\n        }\r\n        console.log(\"indice = \" + indice + \"la somme des \" + etendu + \" premier MACD est \" + table_EMA[i]);\r\n        table_EMA[i] = (Math.round(table_EMA[i]))/etendu;\r\n\r\n    } else if (i > (etendu+start-2)) { \r\n      table_EMA[i] = (Number(table[i][indice] * (2/(etendu +1))))+ (table_EMA[i-1] * (1-((2/(etendu +1)))) ) ;\r\n     }\r\n  } \r\n  return table_EMA;\r\n};\r\n\r\nexport function Analyse_Openprice_vs_MA (table,start,range_open_price) {\r\n\r\n  let table_Openprice_vs_MA =[];\r\n\r\n  for (let i = 0; i < start; i++) {\r\n    table_Openprice_vs_MA[i]= \"\";\r\n  }\r\n\r\n  for (let i = start; i < table.length; i++) {\r\n\r\n    let testOPvsMA = (table[i][3]-table[i][14])/table[i][14];\r\n\r\n    if (testOPvsMA < (-range_open_price)) { \r\n      table_Openprice_vs_MA[i] = \"OP inferieur a la MA\" ;\r\n     } else if (testOPvsMA > (range_open_price)) {\r\n      table_Openprice_vs_MA[i] = \"OP superieur a la MA\" ;\r\n     } else  {\r\n      table_Openprice_vs_MA[i] = \"OP proche la MA\" ;\r\n    }\r\n  }\r\n  return table_Openprice_vs_MA;\r\n};\r\n\r\nexport function Analyse_MACD_vs_MA (table,start,range_MACD) {\r\n\r\n  let table_MACD_vs_MA =[];\r\n\r\n  for (let i = 0; i < start; i++) {\r\n    table_MACD_vs_MA[i]= \"\";\r\n  }\r\n\r\n  for (let i = start; i < table.length; i++) {\r\n\r\n    let testMACDvsMA = table[i][17]/table[i][14];\r\n\r\n    if (testMACDvsMA < (-range_MACD)) { \r\n      table_MACD_vs_MA[i] = \"MACD negatif\" ;\r\n     } else if (testMACDvsMA > (range_MACD)) {\r\n      table_MACD_vs_MA[i] = \"MACD positif\" ;\r\n     } else  {\r\n      table_MACD_vs_MA[i] = \"MACD neutre\" ;\r\n    }\r\n  }\r\n  return table_MACD_vs_MA;\r\n};\r\n\r\nexport function EMA_MACD_vs_MACD (table,start,decalage,range_delta_MACD) {\r\n  \r\n    let EMA_MACD_vs_MACD_table =[];\r\n\r\n    for (let i = 0; i < start; i++) {\r\n      EMA_MACD_vs_MACD_table[i]= \"\";\r\n    }\r\n  \r\n    for (let i = start; i < table.length; i++) {\r\n  \r\n      let testMACDvsEMAMACD = (table[i-decalage][17]-table[i-decalage][18])/table[i-decalage][14];\r\n  \r\n      if (testMACDvsEMAMACD < (-range_delta_MACD)) { \r\n        EMA_MACD_vs_MACD_table[i] = \"MACD inferieur a son EMA\" ;\r\n       } else if (testMACDvsEMAMACD > (range_delta_MACD)) {\r\n        EMA_MACD_vs_MACD_table[i] = \"MACD superieur a son EMA\" ;\r\n       } else  {\r\n        EMA_MACD_vs_MACD_table[i] = \"MACD proche de son EMA\" ;\r\n      }\r\n    }\r\n    return EMA_MACD_vs_MACD_table;\r\n};\r\n\r\nexport function growth_calculation (table,start,periode) {\r\n\r\nlet table_growth = [[]];\r\n\r\n\r\n\r\n  for (let i = 0; i < start; i++) {\r\n    let ligne_table = [];\r\n\r\n    ligne_table[0]=0;\r\n    ligne_table[1]=0;\r\n    ligne_table[2]=0;\r\n\r\n    table_growth[i] = ligne_table;\r\n\r\n  }\r\n\r\n  for (let i = start; i < (table.length- periode); i++) {  // on calcule la croissance en comparant la moyenne des high/low et close de la bougie T+periode a l'open de la bougie T\r\n      let ligne_table = [];\r\n\r\n      ligne_table[0]=Number(( (Number(table[i+periode][4])+Number(table[i+periode][5])+Number(table[i+periode][6]))/3 - Number(table[i][3]) ) / Number(table[i][3])) ;\r\n\r\n      ligne_table[1]= table[i][4];\r\n      for (let j = 1; j< (periode+1); j++ ){  // On recupere le plus haut de la periode analyse et on le compare a l'open price du debut de la periode\r\n          let test1 = ligne_table[1];\r\n          ligne_table[1] = Math.max(test1,table[i+j][4]);\r\n      }\r\n      ligne_table[1] = (ligne_table[1]-table[i][3])/table[i][3];\r\n\r\n      ligne_table[2]= table[i][5];\r\n      for (let j = 1; j< (periode+1); j++ ){ // On recupere le plus bas de la periode analyse et on le compare a l'open price du debut de la periode\r\n          let test1 = ligne_table[2];\r\n          ligne_table[2] = Math.min(test1,table[i+j][5]);\r\n      }\r\n      ligne_table[2] = (ligne_table[2]-table[i][3])/table[i][3];\r\n      table_growth[i] = ligne_table;\r\n  }\r\n\r\n  for (let i = table.length- periode; i < table.length; i++) {\r\n    let ligne_table = [];\r\n\r\n    ligne_table[0]=0;\r\n    ligne_table[1]=0;\r\n    ligne_table[2]=0;\r\n\r\n    table_growth[i] = ligne_table;\r\n\r\n  }\r\n\r\n  return table_growth;\r\n}\r\n\r\n\r\n","import {convertinsecond,converttodate,converttohours,Appelle_API,converttoURL,arrayToCsv,downloadCsv,convert_table_html} from './Function_diverses';\r\n\r\nexport function Strategy_MACD1 (table,start, marge_tendance, marge_MACD, stop_loss_marge, gain_marge){   // marge_tendance, marge_MACD, stop_loss_marge et gain_marge sont exprimes en % du close price\r\n\r\n  console.log(table.length);\r\n\r\n  let strat_table = [[0,0,0,0,0,0]];\r\n\r\n  for (let i = 1; i < start; i++) {\r\n    strat_table.push([0,0,0,0,0,0]);\r\n  }\r\n\r\n  for (let i = start; i < table.length; i++) {\r\n\r\n  \r\n  // on commence par calculer les differentes variables declarees plus haut\r\n\r\n    let abs_marge_tendance = marge_tendance * table[i][6]/100; // Ces marges servent a definir a partir de quel niveau d'ecart entre MA 200 et MA 100 on identifie une tendance\r\n    let abs_marge_MACD = marge_MACD * table[i][6]/100; // Ces marges servent a definir a partir de quel niveau d'ecart entre le MACD et son EMA on considere la chose significative\r\n    \r\n\r\n    let test_tendance = \"initial\";   // variable qui prend \"up\" si on est en tendance general de hausse, \"down\" si on est en tendance general de baisse et \"flat\" sinon\r\n    let test_MACD_T0 = \"initial\"; // variable qui prend la valeur \"up\" si le MACD est en dessus de son EMA a l'instant T et \"down\" si il est en dessous\r\n    let test_MACD_T1 = \"initial\"  // variable qui prend la valeur \"up\" si le MACD est en dessus de son EMA a l'instant T-1 et \"down\" si il est en dessous\r\n\r\n    test_MACD_T1\r\n\r\n    if ((table[i][15] - abs_marge_tendance) > table[i][14] ) {\r\n        test_tendance = \"up\";\r\n    } else if ((table[i][14] - abs_marge_tendance) > table[i][15] ) {\r\n      test_tendance = \"down\";\r\n    } else {\r\n      test_tendance = \"flat\"\r\n    }\r\n\r\n    if ((table[i-1][18]-abs_marge_MACD) > table[i-1][19] ) {\r\n      test_MACD_T1 = \"up\";\r\n    } else if ((table[i-1][19]-abs_marge_MACD) > table[i-1][18] ) {\r\n      test_MACD_T1 = \"down\";\r\n    } else {\r\n      test_MACD_T1 = \"flat\"\r\n    }\r\n\r\n    if ((table[i][18]-abs_marge_MACD) > table[i][19] ) {\r\n      test_MACD_T0 = \"up\";\r\n    } else if ((table[i][19]-abs_marge_MACD)  > table[i][18] ) {\r\n      test_MACD_T0 = \"down\";\r\n    }else {\r\n      test_MACD_T0 = \"flat\"\r\n    }\r\n\r\n\r\n  // on utilise ensuite ces variables pour identifier les cas ou on veut faire un trade\r\n      \r\n    if ((test_tendance == \"up\") && (test_MACD_T1 == \"down\") && (test_MACD_T0 == \"up\") ) { \r\n      strat_table.push([1 , ((1-stop_loss_marge/100)*table[i][6]) , ((1+gain_marge/100)*table[i][6])]);\r\n\r\n    } else if ((test_tendance == \"down\") && (test_MACD_T1 == \"up\") && (test_MACD_T0 == \"down\") ) {\r\n      strat_table.push([-1 , ((1+stop_loss_marge/100)*table[i][6]) , ((1-gain_marge/100)*table[i][6])]);\r\n    } else {\r\n      strat_table.push([0,0,0]);\r\n    }\r\n  }\r\n  return strat_table;\r\n};","// https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#public-api-endpoints\r\nimport {creer_event_dl_data} from './Function_data';\r\nimport {convertinsecond,converttodate,converttohours,Appelle_API,converttoURL,arrayToCsv,downloadCsv,convert_table_html} from './Function_diverses';\r\nimport {Moving_average,Calculate_EMA,Calculate_EMA_ALT,Analyse_Openprice_vs_MA,Analyse_MACD_vs_MA,EMA_MACD_vs_MACD,growth_calculation} from './Function_Indicator';\r\nimport {Strategy_MACD1} from './Function_Strategy';\r\n\r\n\r\n\r\n// On declare les differents elements de la page HTML en tant qu'element Javascrip\r\n\r\n    // declaration des elements html de la partie \"recuperation des donnees de l'API\"\r\nlet input_symbole_field = document.getElementById(\"input_symbole\");\r\nlet input_interval_field = document.getElementById(\"input_interval\");\r\nlet input_startTime_field = document.getElementById(\"input_startTime\");\r\nlet input_endTime_field = document.getElementById(\"input_endTime\");\r\nlet input_limit_field = document.getElementById(\"input_limit\");\r\nlet nombre_interval_field = document.getElementById(\"nombre_interval\");\r\nlet nombre_interval_traite = document.getElementById(\"interval_traite\");\r\nlet submit_button = document.getElementById(\"submit_button\");\r\nlet start_date_display = document.getElementById(\"startdatedisplay\");\r\nlet end_date_display = document.getElementById(\"enddatedisplay\");\r\n\r\n// declaration des elements html de la partie \"calcul des indicateurs\"\r\nlet MA_extense1_input = document.getElementById(\"MA_extense1\");  //  le champ d'input qui definit sur combien de bougie precedent on calcule la moyenne\r\nlet MA_extense2_input = document.getElementById(\"MA_extense2\");\r\nlet EMA_lenght_1_input = document.getElementById(\"EMA_lenght_1\"); //  le champ d'input qui definit sur combien de bougie precedent on calcule la moyenne exponentielle (la premiere)\r\nlet EMA_lenght_2_input = document.getElementById(\"EMA_lenght_2\"); //  le champ d'input qui definit sur combien de bougie precedent on calcule la moyenne exponentielle (la seconde)\r\nlet MACD_EMA_lenght_input = document.getElementById(\"MACD_EMA_lenght\"); // le champ d'input qui definit sur combien de bougie precedent on calcule la moyenne exponentielle (la seconde)\r\nlet Indicator_button = document.getElementById(\"Indicator_button\");\r\nlet fin_indicateur_button = document.getElementById(\"fin_indicateur\");\r\n\r\nlet strategy_button = document.getElementById(\"strategy_button\");\r\n\r\n// on declare les elements HTML lie a la simulation de trading\r\nlet simulate_button = document.getElementById(\"simulate_trading\");\r\nlet start_capital_field = document.getElementById(\"start_capital\");\r\nlet leverage_ratio_field = document.getElementById(\"leverage_ratio\");\r\n\r\nlet launch_button = document.getElementById(\"launch_button\");\r\nlet answer_field1 = document.getElementById(\"result_input1\");\r\nlet answer_field2 = document.getElementById(\"result_input2\");\r\n// Fin de la declaration des elements de la page HTML\r\n\r\ncreer_event_dl_data();\r\n\r\nlet synthesis_table = [[\"Benefice\",\"Number of trade\",\"Long\",\"Long gain\",\"Long loss\",\"Short\",\"Short gain\",\"Short loss\"]];\r\n\r\nlet compteur =0;\r\nconst interval_par_iteration = 500;\r\n\r\nlet MA_extense1 = 0;\r\nlet MA_extense2 = 0;\r\nlet EMA_lenght_1 = 0;\r\nlet EMA_lenght_2 = 0;\r\nlet MACD_EMA_lenght = 0;\r\n\r\nconst start_analysis = Math.max(MA_extense1,MA_extense2,EMA_lenght_1,EMA_lenght_2)+1;\r\n\r\n\r\nlaunch_button.addEventListener(\"click\",async function(){\r\n  \r\n  let result_table = data_table;\r\n  let title_table = [[\"Timestamp\",\"Date\",\"Hours\",\"Open\",\"High\",\"Low\",\"Close\",\"Volume\",\"Close time\",\"Quote asset volume\",\"Number of trades\",\"Taker buy base asset volume\",\"Taker buy quote asset volume\",\"ignore\"]];\r\n\r\n  // Fin de la partie recuperation de la data API\r\n\r\n  // Debut de la partie calcule des indicateurs\r\n    MA_extense1 = Number(MA_extense1_input.value);\r\n    MA_extense2 = Number(MA_extense2_input.value);\r\n    EMA_lenght_1 = Number(EMA_lenght_1_input.value);\r\n    EMA_lenght_2 = Number(EMA_lenght_2_input.value);\r\n    MACD_EMA_lenght = Number(MACD_EMA_lenght_input.value);\r\n\r\n    title_table[0].push(\"Moving average on \"+MA_extense1);\r\n    title_table[0].push(\"Moving average on \"+MA_extense2);\r\n    title_table[0].push(\"EMA on \" + EMA_lenght_1);\r\n    title_table[0].push( \"EMA on \" + EMA_lenght_2);\r\n    title_table[0].push(\"MACD\");\r\n    title_table[0].push(\"EMA MACD sur \" + MACD_EMA_lenght);\r\n\r\n    // Dans cet partie, on calcule la moyenne mobile sur les valeurs des opentimes (3 ieme colonne) et on la rajoute a la fin du tableu \"final table\"\r\n    let average_table1 = [];\r\n    \r\n    average_table1 = Moving_average(result_table,MA_extense1);\r\n\r\n    for (let i = 0; i < result_table.length; i++) {   // on rajoute le moving average a la fin de chaque ligne du tableau\r\n      result_table[i].push(Math.floor(average_table1[i]*10)/10);\r\n    }\r\n    //Fin de la partie sur la moyenne mobile\r\n\r\n    // Dans cet partie, on calcule la deuxieme moyenne mobile sur les valeurs des opentimes (3 ieme colonne) et on la rajoute a la fin du tableu \"final table\"\r\n    let average_table2 = [];\r\n    average_table2 = Moving_average(result_table,MA_extense2);\r\n\r\n    \r\n    for (let i = 0; i < result_table.length; i++) {   // on rajoute le moving average a la fin de chaque ligne du tableau\r\n      result_table[i].push(Math.floor(average_table2[i]*10)/10);\r\n    }\r\n      //Fin de la partie sur la moyenne mobile\r\n    \r\n    // Dans cet partie on calcule le EMA (Exponential moving average) sur les periodes EMA_lenght_1 et EMA_lenght_2 sur les valeurs des opentimes (3 ieme colonne) et on les rajoute a la fin du tableu \"result_table\"\r\n    let EMA_table1 =[];\r\n    EMA_table1 = Calculate_EMA(result_table,EMA_lenght_1,3);\r\n\r\n    for (let i = 0; i < result_table.length; i++) {   // on rajoute le EMA1\r\n      result_table[i].push(Math.floor(EMA_table1[i]*10)/10);\r\n    }\r\n\r\n    let EMA_table2 =[];\r\n    EMA_table2 = Calculate_EMA(result_table,EMA_lenght_2,3);\r\n\r\n    for (let i = 0; i < result_table.length; i++) {   // on rajoute le EMA2\r\n      result_table[i].push(Math.floor(EMA_table2[i]*10)/10);\r\n    }\r\n  //Fin de la partie sur l'EMA'\r\n\r\n    //On rajoute le MACD\r\n    for (let i = 0 ; i < result_table.length; i++){\r\n        if(i < (Math.max(EMA_lenght_1,EMA_lenght_2)-1) ){\r\n          result_table[i].push(0);\r\n        } else{\r\n          result_table[i].push(Math.floor(Number(result_table[i][16]-result_table[i][17])*10)/10);\r\n        }\r\n    }\r\n    //Fin du MACD\r\n\r\n    // on rajoute l'EMA-X sur le MACD\r\n    let MACD_EMA =[];\r\n    MACD_EMA = Calculate_EMA_ALT(result_table,MACD_EMA_lenght,18,Math.max(EMA_lenght_1,EMA_lenght_2));\r\n\r\n    for (let i = 0; i < result_table.length; i++) {   // on rajoute le MACD_EMA\r\n      result_table[i].push(Math.floor(MACD_EMA[i]*10)/10);\r\n    }\r\n    // Fin de la partie EMA-X sur le MACD\r\n    console.log(\"Fin de la partie 2 sur le calcul des indicateurs\");\r\n    fin_indicateur_button.innerText =(\"Fin du calcul des indicateurs\");\r\n  // Fin de la partie sur le calcul des indicateurs\r\n\r\n  // Debut de la partie d'identification de la strategie et des opportunites de trade\r\n    // On declare les elements HTML cree pour remplir les parametres de la fonction, en tant qu'element JS\r\n    let marge_tendance_input = document.getElementById(\"marge_tendance\");\r\n    let marge_MACD_input = document.getElementById(\"marge_MACD\");\r\n    let marge_stop_loss_input = document.getElementById(\"marge_stop_loss\");\r\n    let marge_gain_input = document.getElementById(\"marge_gain\");\r\n\r\n    // On recupere la valeur de ces parametres\r\n    let marge_tendance_value = Number(marge_tendance_input.value);\r\n    let marge_MACD_value = Number(marge_MACD_input.value);\r\n    let marge_stop_loss_value = Number(marge_stop_loss_input.value);\r\n    let marge_gain_value = Number(marge_gain_input.value);\r\n\r\n    // On definit a partir de quel ligne du tableau on commence l'anayse\r\n    console.log(\"On calcule le start a partir de \" + EMA_lenght_1 + \" \"+ EMA_lenght_2 + \" \" + MACD_EMA_lenght + \" \" +MA_extense1 + \" \" + MA_extense1);\r\n    let start2 = Math.max(Math.max(Number(EMA_lenght_1),Number(EMA_lenght_2)) + Number(MACD_EMA_lenght) , Math.max(Number(MA_extense1),Number(MA_extense1)));\r\n\r\n    // On rajoute les nouveaux titres\r\n    title_table[0].push(\"Opportunite de trading\");\r\n    title_table[0].push(\"Stop_loss\");\r\n    title_table[0].push(\"Get_gain\");\r\n\r\n    // on fait appelle a la fonction utilisant une strategie pour definir des opportunites de trade\r\n    let strat_table = [[]];\r\n    console.log(\"les parametres de la fonction sont \" + start2 + \" \"+ marge_tendance_value + \" \" + marge_MACD_value + \" \" +marge_stop_loss_value + \" \" + marge_gain_value);\r\n    strat_table= Strategy_MACD1(result_table,start2, marge_tendance_value, marge_MACD_value, marge_stop_loss_value, marge_gain_value);\r\n    for (let i = 0; i < result_table.length; i++) {   // on rajoute le EMA1\r\n      result_table[i].push(strat_table[i][0]);\r\n      result_table[i].push(strat_table[i][1]);\r\n      result_table[i].push(strat_table[i][2]);\r\n    }\r\n  // Fin de la partie d'identification de la strategie et des opportunites de trade\r\n\r\n  // Debut de la simulation de la strategie\r\n    let start_capital = Number(start_capital_field.value);\r\n    let leverage_ratio = Number(leverage_ratio_field.value);\r\n    let simulation_table = [[]];\r\n\r\n    title_table[0].push(\"trade_execute\");\r\n    title_table[0].push(\"Resultat_trade\");\r\n    title_table[0].push(\"Trade on hold\");\r\n    title_table[0].push(\"Capital actuel\");\r\n\r\n    simulation_table = simultrade (result_table,start_capital,leverage_ratio);\r\n\r\n    for (let i = 0; i < result_table.length; i++) {   // on rajoute le EMA1\r\n      result_table[i].push(simulation_table[i][0]);\r\n      result_table[i].push(simulation_table[i][1]);\r\n      result_table[i].push(simulation_table[i][2]);\r\n      result_table[i].push(simulation_table[i][3]);\r\n    }\r\n\r\n  // Fin de la simulation de la strategy\r\n\r\n  console.log(result_table);\r\n  // on cree puis on download le CSV\r\n    let Table_inCVS = arrayToCsv(title_table) +\"\\r\\n\"+ arrayToCsv(result_table); // \"\\r\\n\" permet un retour a la ligne entre les deux tableaux convertit en string\r\n    downloadCsv(Table_inCVS,\"tradesimulation\");\r\n  // Fin de la creation du CSV\r\n\r\n\r\n  // Creation du tableau de synthese\r\n\r\n\r\n\r\n   synthesis_table.push(analyze_trade (result_table));\r\n   console.log(synthesis_table);\r\n   synthesis_table_html = convert_table_html (synthesis_table);\r\n\r\n   answer_field1.innerHTML = synthesis_table_html;\r\n\r\n   result_table.lenght = 0;\r\n\r\n\r\n\r\n});"],"names":["converttodate","timestamp","Date","toLocaleDateString","Appelle_API","URLinput","fetch","then","res","ok","json","jsonfile","err","converttoURL","startTime_value","endTime_value","interval_par_iteration","interval_en_seconde","symbole_value","interval_value","result","API","nombre_interval_total","Math","floor","nombre_iteration","ceil","i","push","arrayToCsv","data","map","row","String","join","downloadCsv","csv","filename","fakeLink","document","createElement","style","display","body","appendChild","blob","Blob","type","setAttribute","URL","createObjectURL","click","convert_table_html","table","html_text","j","length","Moving_average","etendu","table_average","Number","round","Calculate_EMA","indice","table_EMA","Calculate_EMA_ALT","start","console","log","Strategy_MACD1","marge_tendance","marge_MACD","stop_loss_marge","gain_marge","strat_table","test_tendance","test_MACD_T0","test_MACD_T1","abs_marge_tendance","abs_marge_MACD","getElementById","MA_extense1_input","MA_extense2_input","EMA_lenght_1_input","EMA_lenght_2_input","MACD_EMA_lenght_input","fin_indicateur_button","start_capital_field","leverage_ratio_field","launch_button","answer_field1","data_table","input_symbole_field2","input_interval_field2","input_startTime_field2","input_endTime_field2","dlcsv_button","cvs_input","csv_input_form","result_upload","afficher_data_button","compteur2","csv_as_string","title_table2","reader","FileReader","onload","e","target","addEventListener","preventDefault","input","files","readAsText","setTimeout","array","csvToArray2","innerText","URL_T","value","original_starttime_value","resustat1","timeinput","nombre_interval_field","nombre_iteration_restante","Promise","all","k","min","ligne_table_result","toLocaleTimeString","nombre_interval_traite","start_date_display","end_date_display","creer_event_dl_data","synthesis_table","MA_extense1","MA_extense2","EMA_lenght_1","EMA_lenght_2","MACD_EMA_lenght","max","result_table","title_table","average_table1","average_table2","EMA_table1","EMA_table2","MACD_EMA","marge_tendance_input","marge_MACD_input","marge_stop_loss_input","marge_gain_input","marge_tendance_value","marge_MACD_value","marge_stop_loss_value","marge_gain_value","start2","start_capital","leverage_ratio","simulation_table","simultrade","analyze_trade","synthesis_table_html","innerHTML","lenght"],"sourceRoot":""}